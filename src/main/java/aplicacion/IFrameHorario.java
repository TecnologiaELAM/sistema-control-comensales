/*
 * Copyright (C) 2022 rlove
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package aplicacion;

import clases.Comida;
import clases.Controls;
import clases.Item;
import clases.Queries;
import com.github.lgooddatepicker.components.TimePicker;
import com.github.lgooddatepicker.components.TimePickerSettings;
import com.github.lgooddatepicker.zinternaltools.TimeChangeEvent;
import java.sql.Time;
import java.time.LocalTime;
import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

/**
 *
 * @author rlove
 */
public class IFrameHorario extends javax.swing.JInternalFrame {
    private List<Comida> comidas;
    private Comida comida;
    private int hashCode;
    private final Queries queries;

    /**
     * Creates new form IFrameComidas
     * @param queries
     */
    public IFrameHorario(Queries queries) {
        initComponents();
        this.queries = queries;        
        prepareFields();
        reset();        
    }
    
    private void fillListComida(){
        List<Item> items;
        
        items = new ArrayList<>();
        comidas.forEach(e -> items.add(new Item(e, e.getComida())));
        
        Controls.fillListItems(listComidas, items);
    }
    
    private void prepareFields(){
        timeInicio.getSettings().generatePotentialMenuTimes(TimePickerSettings.TimeIncrement.FiveMinutes, LocalTime.MIDNIGHT, LocalTime.MIDNIGHT);        
        timeInicio.getSettings().setDisplayToggleTimeMenuButton(false);
        timeInicio.getSettings().setDisplaySpinnerButtons(true);
        timeInicio.getSettings().setAllowEmptyTimes(false);
        timeInicio.setEnabled(false);
        timeFin.getSettings().generatePotentialMenuTimes(TimePickerSettings.TimeIncrement.FiveMinutes, LocalTime.MIDNIGHT, LocalTime.MIDNIGHT);
        timeFin.getSettings().setDisplayToggleTimeMenuButton(false);
        timeFin.getSettings().setDisplaySpinnerButtons(true);
        timeFin.getSettings().setAllowEmptyTimes(false);        
        timeFin.setEnabled(false);  
        
        timeInicio.addTimeChangeListener((TimeChangeEvent event) -> {            
            TimePicker timePicker;
            LocalTime localTime;            
            
            timePicker = event.getSource();
            localTime = timePicker.getTime();
            
            if(comida != null){                                
                comida.setInicio(Time.valueOf(localTime));
            }  
            
            enableBottonGuardar();
        });        
        
        timeFin.addTimeChangeListener((TimeChangeEvent event) -> {
            TimePicker timePicker;
            LocalTime localTime;            
            
            timePicker = event.getSource();
            localTime = timePicker.getTime();
            
            if(comida != null){                                
                comida.setFin(Time.valueOf(localTime));
            }                     
            
            enableBottonGuardar();
        });        
    }
    
    private void reset(){             
        comidas = queries.getComidas();
        hashCode = comidas.hashCode();
        fillListComida();
        listComidas.setSelectedIndex(-1);
        timeInicio.clear();
        timeFin.clear();
        btnGuardar.setEnabled(false);
    }
    
    private void enableBottonGuardar(){
        btnGuardar.setEnabled(hashCode != comidas.hashCode());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDateChooser2 = new com.toedter.calendar.JDateChooser();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        listComidas = new javax.swing.JList<>();
        timeInicio = new com.github.lgooddatepicker.components.TimePicker();
        timeFin = new com.github.lgooddatepicker.components.TimePicker();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        btnGuardar = new javax.swing.JButton();
        btnCerrar = new javax.swing.JButton();

        setTitle("Horarios");
        setMaximumSize(new java.awt.Dimension(390, 186));
        setMinimumSize(new java.awt.Dimension(390, 186));
        setPreferredSize(new java.awt.Dimension(390, 186));

        listComidas.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        listComidas.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        listComidas.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listComidasValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(listComidas);

        jLabel1.setText("Hora inicial");

        jLabel2.setText("Hora final");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(timeInicio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(timeFin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(timeInicio, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(timeFin, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 16, Short.MAX_VALUE)))
                .addContainerGap())
        );

        btnGuardar.setText("Guardar");
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });

        btnCerrar.setText("Cerrar");
        btnCerrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCerrarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnCerrar, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnGuardar)
                    .addComponent(btnCerrar))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void listComidasValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listComidasValueChanged
        int index;
        DefaultListModel model;        
        
        index = listComidas.getSelectedIndex();        
        
        if(index >= 0){
            model = (DefaultListModel) listComidas.getModel();
            comida = (Comida) model.getElementAt(index);
        }else{
            comida = null;
        }
        
        if(comida != null){
            timeInicio.setTime(comida.getInicio().toLocalTime());
            timeFin.setTime(comida.getFin().toLocalTime());            
            timeInicio.setEnabled(true);
            timeFin.setEnabled(true);
        }else{
            timeInicio.clear();
            timeFin.clear();
            timeInicio.setEnabled(false);
            timeFin.setEnabled(false);            
        }
    }//GEN-LAST:event_listComidasValueChanged

    private void btnCerrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCerrarActionPerformed
        if(hashCode == comidas.hashCode()){
            dispose();
        }else{
            int response;
            
            response = JOptionPane.showInternalConfirmDialog(
                    this, 
                    "Los cambios realizados no se guardarán.\n¿Desea continuar?", 
                    "Cerrar", 
                    JOptionPane.YES_NO_OPTION, 
                    JOptionPane.WARNING_MESSAGE);
            
            if(response == JOptionPane.YES_OPTION){
                dispose();
            }
        }   
    }//GEN-LAST:event_btnCerrarActionPerformed

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        if(hashCode != comidas.hashCode()){
            int response;
            
            response = JOptionPane.showInternalConfirmDialog(
                    this, 
                    "¿Desea guardar los cambios?", 
                    "Actualizar horario", 
                    JOptionPane.YES_NO_OPTION, 
                    JOptionPane.QUESTION_MESSAGE);
            
            if(response == JOptionPane.YES_OPTION){
                int updateComidas = queries.updateComidas(comidas);
                
                if(updateComidas == Queries.OK){
                    JOptionPane.showInternalMessageDialog(
                            this, 
                            "Horario actualizado exitósamente.", 
                            "Actualizar horario", 
                            JOptionPane.INFORMATION_MESSAGE);
                    reset();
                }else{
                    JOptionPane.showInternalMessageDialog(
                            this, 
                            "Ocurrio un error al actualizar el horario.", 
                            "Actualizar horario", 
                            JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }//GEN-LAST:event_btnGuardarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCerrar;
    private javax.swing.JButton btnGuardar;
    private com.toedter.calendar.JDateChooser jDateChooser2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList<String> listComidas;
    private com.github.lgooddatepicker.components.TimePicker timeFin;
    private com.github.lgooddatepicker.components.TimePicker timeInicio;
    // End of variables declaration//GEN-END:variables
}
